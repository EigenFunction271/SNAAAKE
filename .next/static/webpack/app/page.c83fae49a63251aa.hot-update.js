"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/game.tsx":
/*!*****************************!*\
  !*** ./components/game.tsx ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SnakeGame; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_particle_system__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/particle-system */ \"(app-pages-browser)/./utils/particle-system.tsx\");\n/* harmony import */ var _utils_snake__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/snake */ \"(app-pages-browser)/./utils/snake.tsx\");\n/* harmony import */ var _utils_food__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/utils/food */ \"(app-pages-browser)/./utils/food.tsx\");\n/* harmony import */ var _utils_ai_snake__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/utils/ai-snake */ \"(app-pages-browser)/./utils/ai-snake.tsx\");\n/* harmony import */ var _utils_settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/utils/settings */ \"(app-pages-browser)/./utils/settings.tsx\");\n/* harmony import */ var _utils_audio_system__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils/audio-system */ \"(app-pages-browser)/./utils/audio-system.tsx\");\n/* harmony import */ var _utils_asset_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/utils/asset-manager */ \"(app-pages-browser)/./utils/asset-manager.tsx\");\n/* harmony import */ var _hooks_use_media_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/hooks/use-media-query */ \"(app-pages-browser)/./hooks/use-media-query.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nfunction SnakeGame() {\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"menu\");\n    const [score, setScore] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [highScore, setHighScore] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [loadingProgress, setLoadingProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Game loop reference to store animation frame ID\n    const gameLoopRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // Game objects references\n    const playerSnakeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const foodRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const aiSnakesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const particleSystemsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const powerUpsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const settingsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(_utils_settings__WEBPACK_IMPORTED_MODULE_6__.SettingsManager.getInstance());\n    const audioRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(_utils_audio_system__WEBPACK_IMPORTED_MODULE_7__.AudioSystem.getInstance());\n    const assetManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(_utils_asset_manager__WEBPACK_IMPORTED_MODULE_8__.AssetManager.getInstance());\n    // Input state\n    const keysPressed = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Set());\n    // Canvas dimensions\n    const canvasWidth = 800;\n    const canvasHeight = 600;\n    // Add responsive state\n    const isMobile = (0,_hooks_use_media_query__WEBPACK_IMPORTED_MODULE_9__.useMediaQuery)(\"(max-width: 768px)\");\n    const [touchDirection, setTouchDirection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 0,\n        y: 0\n    });\n    const [isBoosting, setIsBoosting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Initialize game\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"Component mounted\");\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n        console.log(\"Canvas initialized:\", {\n            width: canvasWidth,\n            height: canvasHeight\n        });\n        // Load high score from localStorage\n        const savedHighScore = localStorage.getItem(\"snakeHighScore\");\n        if (savedHighScore) {\n            setHighScore(Number.parseInt(savedHighScore));\n        }\n        // Load settings\n        const settings = settingsRef.current.getSettings();\n        // Start background music\n        if (settings.soundEnabled) {\n            audioRef.current.playMusic();\n        }\n        // Set up event listeners\n        window.addEventListener(\"keydown\", handleKeyDown);\n        window.addEventListener(\"keyup\", handleKeyUp);\n        // Draw initial grid\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = \"#000\";\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n            drawGrid(ctx);\n        }\n        return ()=>{\n            window.removeEventListener(\"keydown\", handleKeyDown);\n            window.removeEventListener(\"keyup\", handleKeyUp);\n            cancelAnimationFrame(gameLoopRef.current);\n        };\n    }, []);\n    // Add loading effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadAssets = async ()=>{\n            try {\n                await assetManagerRef.current.loadAll();\n                setLoading(false);\n            } catch (error) {\n                console.error(\"Failed to load assets:\", error);\n            // Handle error appropriately\n            }\n        };\n        const updateProgress = ()=>{\n            setLoadingProgress(assetManagerRef.current.getLoadingProgress());\n            if (loading) {\n                requestAnimationFrame(updateProgress);\n            }\n        };\n        loadAssets();\n        updateProgress();\n    }, []);\n    // Handle key press\n    const handleKeyDown = (e)=>{\n        keysPressed.current.add(e.key.toLowerCase());\n        // Handle pause\n        if (e.key === \"Escape\" && gameState === \"playing\") {\n            setGameState(\"paused\");\n            cancelAnimationFrame(gameLoopRef.current);\n        } else if (e.key === \"Escape\" && gameState === \"paused\") {\n            setGameState(\"playing\");\n            gameLoopRef.current = requestAnimationFrame(gameLoop);\n        }\n        // Start game with space or enter\n        if ((e.key === \" \" || e.key === \"Enter\") && gameState === \"menu\") {\n            startGame();\n        }\n        // Restart game with R\n        if (e.key.toLowerCase() === \"r\" && gameState === \"gameOver\") {\n            startGame();\n        }\n    };\n    // Handle key release\n    const handleKeyUp = (e)=>{\n        keysPressed.current.delete(e.key.toLowerCase());\n    };\n    // Start a new game\n    const startGame = ()=>{\n        console.log(\"Starting game...\");\n        // Reset game objects\n        playerSnakeRef.current = new _utils_snake__WEBPACK_IMPORTED_MODULE_3__.Snake({\n            x: canvasWidth / 2,\n            y: canvasHeight / 2,\n            color: \"#0ff\",\n            headColor: \"#f0f\",\n            initialLength: 5,\n            initialAngle: Math.PI / 2,\n            speed: 2\n        });\n        console.log(\"Player snake created:\", playerSnakeRef.current);\n        // Initialize canvas dimensions\n        const canvas = canvasRef.current;\n        if (canvas) {\n            canvas.width = canvasWidth;\n            canvas.height = canvasHeight;\n            console.log(\"Canvas dimensions set:\", {\n                width: canvasWidth,\n                height: canvasHeight\n            });\n        }\n        foodRef.current = [\n            new _utils_food__WEBPACK_IMPORTED_MODULE_4__.Food({\n                x: Math.random() * (canvasWidth - 40) + 20,\n                y: Math.random() * (canvasHeight - 40) + 20,\n                type: \"regular\"\n            })\n        ];\n        aiSnakesRef.current = [\n            new _utils_ai_snake__WEBPACK_IMPORTED_MODULE_5__.AISnake({\n                x: 100,\n                y: 100,\n                color: \"#0f0\",\n                headColor: \"#ff0\",\n                initialLength: 3,\n                initialAngle: 0,\n                speed: 1.5,\n                behavior: \"passive\"\n            }),\n            new _utils_ai_snake__WEBPACK_IMPORTED_MODULE_5__.AISnake({\n                x: canvasWidth - 100,\n                y: canvasHeight - 100,\n                color: \"#f00\",\n                headColor: \"#f80\",\n                initialLength: 3,\n                initialAngle: Math.PI,\n                speed: 1.8,\n                behavior: \"aggressive\"\n            })\n        ];\n        particleSystemsRef.current = [];\n        // Reset power-ups\n        powerUpsRef.current = [];\n        // Reset score\n        setScore(0);\n        // Start game\n        setGameState(\"playing\");\n        console.log(\"Game state set to playing\");\n        gameLoopRef.current = requestAnimationFrame(gameLoop);\n        // Play start sound\n        audioRef.current.playSound(\"collect\");\n    };\n    // Main game loop\n    const gameLoop = ()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas not found\");\n            return;\n        }\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            console.error(\"Context not found\");\n            return;\n        }\n        console.log(\"Game Loop Running\", {\n            gameState,\n            canvasWidth: canvas.width,\n            canvasHeight: canvas.height,\n            playerSnake: playerSnakeRef.current ? {\n                x: playerSnakeRef.current.segments[0].x,\n                y: playerSnakeRef.current.segments[0].y\n            } : null,\n            food: foodRef.current.length,\n            aiSnakes: aiSnakesRef.current.length\n        });\n        if (gameState !== \"playing\") return;\n        // Split into core systems\n        renderSystem(ctx);\n        inputSystem();\n        physicsSystem(canvas.width, canvas.height);\n        collisionSystem(ctx);\n        aiSystem(ctx);\n        particleSystem(ctx);\n        hudSystem(ctx);\n        // Continue game loop\n        gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n    // 1. Rendering System\n    const renderSystem = (ctx)=>{\n        // Clear canvas\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n        // Draw grid\n        drawGrid(ctx);\n        // Draw game entities\n        if (playerSnakeRef.current) {\n            playerSnakeRef.current.draw(ctx);\n        }\n        // Draw AI snakes\n        for (const aiSnake of aiSnakesRef.current){\n            aiSnake.draw(ctx);\n        }\n        // Draw food\n        for (const food of foodRef.current){\n            food.update();\n            food.draw(ctx);\n        }\n        // Draw power-ups\n        for (const powerUp of powerUpsRef.current){\n            powerUp.update();\n            powerUp.draw(ctx);\n        }\n        // Draw particles\n        for (const particles of particleSystemsRef.current){\n            particles.draw(ctx);\n        }\n    };\n    // 3. Physics System\n    const physicsSystem = (width, height)=>{\n        if (playerSnakeRef.current) {\n            playerSnakeRef.current.update(width, height);\n        }\n        // Update AI snake positions\n        for (const aiSnake of aiSnakesRef.current){\n            aiSnake.update(width, height);\n        }\n    };\n    // 4. Collision System\n    const collisionSystem = (ctx)=>{\n        checkFoodCollisions(ctx);\n        checkSnakeCollisions();\n        checkPowerUpCollisions();\n    };\n    // 5. AI System\n    const aiSystem = (ctx)=>{\n        updateAISnakes(ctx);\n    };\n    // 6. Particle System\n    const particleSystem = (ctx)=>{\n        updateParticles(ctx);\n    };\n    // 7. HUD System\n    const hudSystem = (ctx)=>{\n        drawHUD(ctx);\n    };\n    // Draw grid lines for futuristic effect\n    const drawGrid = (ctx)=>{\n        ctx.strokeStyle = \"rgba(0, 255, 255, 0.1)\";\n        ctx.lineWidth = 1;\n        // Vertical lines\n        for(let x = 0; x <= canvasWidth; x += 40){\n            ctx.beginPath();\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, canvasHeight);\n            ctx.stroke();\n        }\n        // Horizontal lines\n        for(let y = 0; y <= canvasHeight; y += 40){\n            ctx.beginPath();\n            ctx.moveTo(0, y);\n            ctx.lineTo(canvasWidth, y);\n            ctx.stroke();\n        }\n    };\n    // Handle player input\n    const handleInput = ()=>{\n        if (!playerSnakeRef.current) return;\n        // Turn left with left arrow or A\n        if (keysPressed.current.has(\"arrowleft\") || keysPressed.current.has(\"a\")) {\n            playerSnakeRef.current.turnLeft();\n        }\n        // Turn right with right arrow or D\n        if (keysPressed.current.has(\"arrowright\") || keysPressed.current.has(\"d\")) {\n            playerSnakeRef.current.turnRight();\n        }\n        // Speed boost with up arrow or W\n        if (keysPressed.current.has(\"arrowup\") || keysPressed.current.has(\"w\")) {\n            playerSnakeRef.current.boost();\n        } else {\n            playerSnakeRef.current.normalSpeed();\n        }\n    };\n    // Check for food collisions\n    const checkFoodCollisions = (ctx)=>{\n        if (!playerSnakeRef.current) return;\n        const playerHead = playerSnakeRef.current.getHead();\n        foodRef.current = foodRef.current.filter((food)=>{\n            const distance = Math.hypot(playerHead.x - food.position.x, playerHead.y - food.position.y);\n            if (distance < playerHead.radius + food.radius) {\n                var // Grow snake\n                _playerSnakeRef_current;\n                // Create particle effect\n                particleSystemsRef.current.push(new _utils_particle_system__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                    x: food.position.x,\n                    y: food.position.y,\n                    color: food.color,\n                    particleCount: 20,\n                    lifetime: 30\n                }));\n                (_playerSnakeRef_current = playerSnakeRef.current) === null || _playerSnakeRef_current === void 0 ? void 0 : _playerSnakeRef_current.grow(food.value);\n                // Increase score\n                setScore((prevScore)=>{\n                    const newScore = prevScore + food.value * 10;\n                    // Update high score if needed\n                    if (newScore > highScore) {\n                        setHighScore(newScore);\n                        localStorage.setItem(\"snakeHighScore\", newScore.toString());\n                    }\n                    return newScore;\n                });\n                // Spawn new food\n                spawnFood();\n                return false;\n            }\n            return true;\n        });\n    };\n    // Check for snake collisions\n    const checkSnakeCollisions = ()=>{\n        if (!playerSnakeRef.current) return;\n        const playerHead = playerSnakeRef.current.getHead();\n        // Check collision with player's own body\n        if (playerSnakeRef.current.checkSelfCollision()) {\n            gameOver();\n            return;\n        }\n        // Check collision with AI snakes\n        for (const aiSnake of aiSnakesRef.current){\n            if (aiSnake.checkCollisionWith(playerHead)) {\n                gameOver();\n                return;\n            }\n            // Check if AI snake head collides with player body\n            const aiHead = aiSnake.getHead();\n            if (playerSnakeRef.current.checkCollisionWithPoint(aiHead)) {\n                // Create particle effect\n                particleSystemsRef.current.push(new _utils_particle_system__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                    x: aiHead.x,\n                    y: aiHead.y,\n                    color: aiSnake.color,\n                    particleCount: 30,\n                    lifetime: 40\n                }));\n                // Remove AI snake\n                aiSnakesRef.current = aiSnakesRef.current.filter((snake)=>snake !== aiSnake);\n                // Increase score\n                setScore((prevScore)=>prevScore + 50);\n                // Spawn new AI snake after delay\n                setTimeout(()=>{\n                    if (gameState === \"playing\") {\n                        spawnAISnake();\n                    }\n                }, 5000);\n            }\n        }\n    };\n    // Update and draw AI snakes\n    const updateAISnakes = (ctx)=>{\n        for (const aiSnake of aiSnakesRef.current){\n            // Update AI behavior\n            aiSnake.updateAI(foodRef.current, playerSnakeRef.current, aiSnakesRef.current.filter((snake)=>snake !== aiSnake), canvasWidth, canvasHeight);\n            // Update position\n            aiSnake.update(canvasWidth, canvasHeight);\n            // Draw snake\n            aiSnake.draw(ctx);\n            // Check for food collision\n            const aiHead = aiSnake.getHead();\n            foodRef.current = foodRef.current.filter((food)=>{\n                const distance = Math.hypot(aiHead.x - food.position.x, aiHead.y - food.position.y);\n                if (distance < aiHead.radius + food.radius) {\n                    // Create particle effect\n                    particleSystemsRef.current.push(new _utils_particle_system__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        x: food.position.x,\n                        y: food.position.y,\n                        color: food.color,\n                        particleCount: 15,\n                        lifetime: 25\n                    }));\n                    // Grow snake\n                    aiSnake.grow(food.value);\n                    // Spawn new food\n                    spawnFood();\n                    return false;\n                }\n                return true;\n            });\n        }\n    };\n    // Spawn new food\n    const spawnFood = ()=>{\n        // Random position away from snakes\n        let validPosition = false;\n        let x, y;\n        while(!validPosition){\n            x = Math.random() * (canvasWidth - 40) + 20;\n            y = Math.random() * (canvasHeight - 40) + 20;\n            validPosition = true;\n            // Check distance from player snake\n            if (playerSnakeRef.current) {\n                for (const segment of playerSnakeRef.current.segments){\n                    const distance = Math.hypot(segment.x - x, segment.y - y);\n                    if (distance < 50) {\n                        validPosition = false;\n                        break;\n                    }\n                }\n            }\n            // Check distance from AI snakes\n            if (validPosition) {\n                for (const aiSnake of aiSnakesRef.current){\n                    for (const segment of aiSnake.segments){\n                        const distance = Math.hypot(segment.x - x, segment.y - y);\n                        if (distance < 50) {\n                            validPosition = false;\n                            break;\n                        }\n                    }\n                    if (!validPosition) break;\n                }\n            }\n        }\n        // Determine food type (10% chance for special food)\n        const foodType = Math.random() < 0.1 ? \"special\" : \"regular\";\n        // Create new food\n        foodRef.current.push(new _utils_food__WEBPACK_IMPORTED_MODULE_4__.Food({\n            x: x,\n            y: y,\n            type: foodType\n        }));\n    };\n    // Spawn new AI snake\n    const spawnAISnake = ()=>{\n        // Random position at the edge of the canvas\n        let x, y, angle;\n        const side = Math.floor(Math.random() * 4);\n        switch(side){\n            case 0:\n                x = Math.random() * canvasWidth;\n                y = 20;\n                angle = Math.PI / 2;\n                break;\n            case 1:\n                x = canvasWidth - 20;\n                y = Math.random() * canvasHeight;\n                angle = Math.PI;\n                break;\n            case 2:\n                x = Math.random() * canvasWidth;\n                y = canvasHeight - 20;\n                angle = -Math.PI / 2;\n                break;\n            case 3:\n                x = 20;\n                y = Math.random() * canvasHeight;\n                angle = 0;\n                break;\n        }\n        // Random behavior\n        const behaviors = [\n            \"passive\",\n            \"aggressive\",\n            \"territorial\"\n        ];\n        const behavior = behaviors[Math.floor(Math.random() * behaviors.length)];\n        // Random color (neon)\n        const colors = [\n            \"#0f0\",\n            \"#f00\",\n            \"#ff0\",\n            \"#f0f\",\n            \"#0ff\"\n        ];\n        const color = colors[Math.floor(Math.random() * colors.length)];\n        // Create new AI snake\n        aiSnakesRef.current.push(new _utils_ai_snake__WEBPACK_IMPORTED_MODULE_5__.AISnake({\n            x: x,\n            y: y,\n            color,\n            headColor: \"#fff\",\n            initialLength: 3,\n            initialAngle: angle,\n            speed: 1.5 + Math.random() * 0.5,\n            behavior\n        }));\n    };\n    // Update and draw particle systems\n    const updateParticles = (ctx)=>{\n        particleSystemsRef.current = particleSystemsRef.current.filter((system)=>{\n            system.update();\n            system.draw(ctx);\n            return !system.isDead();\n        });\n    };\n    // Draw HUD (score, etc.)\n    const drawHUD = (ctx)=>{\n        ctx.fillStyle = \"#fff\";\n        ctx.font = '20px \"Courier New\", monospace';\n        ctx.textAlign = \"left\";\n        ctx.fillText(\"Score: \".concat(score), 10, 20);\n        ctx.fillText(\"High Score: \".concat(highScore), 10, 40);\n    };\n    // Game over\n    const gameOver = ()=>{\n        console.log(\"Game over\");\n        setGameState(\"gameOver\");\n        cancelAnimationFrame(gameLoopRef.current);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative h-full\"\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\Work\\\\Python Projects\\\\SNAAAKE\\\\components\\\\game.tsx\",\n        lineNumber: 654,\n        columnNumber: 5\n    }, this);\n}\n_s(SnakeGame, \"/qa+Rz7peROYu5yeHh6QtFvhQGk=\", false, function() {\n    return [\n        _hooks_use_media_query__WEBPACK_IMPORTED_MODULE_9__.useMediaQuery\n    ];\n});\n_c = SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/game.tsx\n"));

/***/ })

});