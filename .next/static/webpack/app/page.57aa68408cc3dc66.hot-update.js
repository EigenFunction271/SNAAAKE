"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/snake.tsx":
/*!*************************!*\
  !*** ./utils/snake.tsx ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Snake: function() { return /* binding */ Snake; }\n/* harmony export */ });\n/* harmony import */ var _audio_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./audio-system */ \"(app-pages-browser)/./utils/audio-system.tsx\");\n\nclass Snake {\n    update(canvasWidth, canvasHeight) {\n        // Update velocity based on current angle\n        this.velocity = {\n            x: Math.cos(this.angle) * this.speed,\n            y: Math.sin(this.angle) * this.speed\n        };\n        // Move head\n        const head = this.segments[0];\n        const newX = head.x + this.velocity.x;\n        const newY = head.y + this.velocity.y;\n        // Handle wrapping around edges\n        let wrappedX = newX;\n        let wrappedY = newY;\n        if (wrappedX < 0) wrappedX = canvasWidth;\n        if (wrappedX > canvasWidth) wrappedX = 0;\n        if (wrappedY < 0) wrappedY = canvasHeight;\n        if (wrappedY > canvasHeight) wrappedY = 0;\n        // Update head position\n        head.x = wrappedX;\n        head.y = wrappedY;\n        // Add new position to history\n        this.history.unshift({\n            x: wrappedX,\n            y: wrappedY\n        });\n        this.history = this.history.slice(0, 1000); // Keep last 1000 positions\n        // Update body segments\n        const spacing = 20; // Distance between segments\n        for(let i = 1; i < this.segments.length; i++){\n            const segment = this.segments[i];\n            const historyIndex = i * 5; // Use history to create smooth following\n            if (this.history[historyIndex]) {\n                segment.x = this.history[historyIndex].x;\n                segment.y = this.history[historyIndex].y;\n            }\n        }\n    }\n    draw(ctx) {\n        ctx.save();\n        // Apply visual effects based on power-ups\n        if (this.isInvulnerable) {\n            ctx.shadowColor = \"#f0f\";\n            ctx.shadowBlur = 20;\n        }\n        if (this.isGhost) {\n            ctx.globalAlpha = 0.6;\n        }\n        // Draw body segments\n        for(let i = this.segments.length - 1; i > 0; i--){\n            const segment = this.segments[i];\n            ctx.beginPath();\n            ctx.arc(segment.x, segment.y, segment.radius, 0, Math.PI * 2);\n            ctx.fillStyle = this.color;\n            ctx.fill();\n            // Add glow effect\n            ctx.shadowColor = this.color;\n            ctx.shadowBlur = 10;\n            ctx.fill();\n            ctx.shadowBlur = 0;\n        }\n        // Draw head\n        const head = this.segments[0];\n        ctx.beginPath();\n        ctx.arc(head.x, head.y, head.radius, 0, Math.PI * 2);\n        ctx.fillStyle = this.headColor;\n        ctx.fill();\n        // Add glow effect to head\n        ctx.shadowColor = this.headColor;\n        ctx.shadowBlur = 15;\n        ctx.fill();\n        ctx.shadowBlur = 0;\n        // Draw eyes\n        const eyeOffset = 3;\n        const eyeRadius = 2;\n        // Calculate eye positions based on angle\n        const leftEyeX = head.x + Math.cos(this.angle - 0.3) * eyeOffset;\n        const leftEyeY = head.y + Math.sin(this.angle - 0.3) * eyeOffset;\n        const rightEyeX = head.x + Math.cos(this.angle + 0.3) * eyeOffset;\n        const rightEyeY = head.y + Math.sin(this.angle + 0.3) * eyeOffset;\n        // Draw left eye\n        ctx.beginPath();\n        ctx.arc(leftEyeX, leftEyeY, eyeRadius, 0, Math.PI * 2);\n        ctx.fillStyle = \"#fff\";\n        ctx.fill();\n        // Draw right eye\n        ctx.beginPath();\n        ctx.arc(rightEyeX, rightEyeY, eyeRadius, 0, Math.PI * 2);\n        ctx.fillStyle = \"#fff\";\n        ctx.fill();\n        ctx.restore();\n    }\n    turnLeft() {\n        this.angle -= this.turningSpeed;\n        console.log(\"Turning left, new angle:\", this.angle);\n    }\n    turnRight() {\n        this.angle += this.turningSpeed;\n        console.log(\"Turning right, new angle:\", this.angle);\n    }\n    boost() {\n        this.speed = this.baseSpeed * 2;\n    }\n    normalSpeed() {\n        this.speed = this.baseSpeed;\n    }\n    grow(amount) {\n        // Increase target length\n        this.targetLength += amount;\n        // Add segments if needed\n        while(this.segments.length < this.targetLength){\n            const lastIndex = this.segments.length - 1;\n            const historyIndex = Math.min(lastIndex * 5, this.history.length - 1);\n            // Get position from history\n            const position = this.history[historyIndex];\n            // Add new segment\n            this.segments.push({\n                x: position.x,\n                y: position.y,\n                radius: 8 - Math.min(3, this.segments.length * 0.1)\n            });\n        }\n    }\n    getHead() {\n        return this.segments[0];\n    }\n    checkSelfCollision() {\n        const head = this.getHead();\n        // Skip the first few segments to prevent false collisions\n        for(let i = 10; i < this.segments.length; i++){\n            const segment = this.segments[i];\n            const distance = Math.hypot(head.x - segment.x, head.y - segment.y);\n            if (distance < head.radius + segment.radius * 0.5) {\n                return true;\n            }\n        }\n        return false;\n    }\n    checkCollisionWithPoint(point) {\n        // Skip the head\n        for(let i = 1; i < this.segments.length; i++){\n            const segment = this.segments[i];\n            const distance = Math.hypot(point.x - segment.x, point.y - segment.y);\n            if (distance < point.radius + segment.radius * 0.8) {\n                return true;\n            }\n        }\n        return false;\n    }\n    collectPowerUp(powerUp) {\n        this.activePowerUps.set(powerUp.type, Date.now() + powerUp.duration);\n        powerUp.applyEffect(this);\n        _audio_system__WEBPACK_IMPORTED_MODULE_0__.AudioSystem.getInstance().playSound(\"powerup\");\n    }\n    constructor(options){\n        this.segments = [];\n        this.velocity = {\n            x: 0,\n            y: 0\n        };\n        this.turningSpeed = 0.05;\n        this.history = [];\n        this.isInvulnerable = false;\n        this.isGhost = false;\n        this.activePowerUps = new Map();\n        this.angle = options.initialAngle;\n        this.speed = options.speed;\n        this.baseSpeed = options.speed;\n        this.color = options.color;\n        this.headColor = options.headColor;\n        this.targetLength = options.initialLength;\n        // Initialize first segment (head)\n        this.segments.push({\n            x: options.x,\n            y: options.y,\n            radius: 15 // Increased head radius for better collision detection\n        });\n        // Add initial body segments\n        for(let i = 1; i < options.initialLength; i++){\n            this.segments.push({\n                x: options.x - i * Math.cos(options.initialAngle) * 20,\n                y: options.y - i * Math.sin(options.initialAngle) * 20,\n                radius: 12 // Slightly larger body segments\n            });\n        }\n        // Initialize history with head position\n        for(let i = 0; i < 1000; i++){\n            this.history.push({\n                x: options.x,\n                y: options.y\n            });\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/snake.tsx\n"));

/***/ })

});